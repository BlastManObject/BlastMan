# BlastMan

A blasting program specially developed for POST and GET requests. Although the intruder method of brupsuite is easy to use, it always appears to be stuck when reading a large dictionary. The http requests of medus and hydra are not always easy, so I decided to write a blasting program about http myself.

Operating environment:
  python3

installation:
  pip install requests
  
Explanation:
  BlastMan is specially used for POST and GET requests. After grabbing the request header, the program can be blasted by modifying the GET variable, POST variable, and request header content.
  

Instructions:
  
    Single mode (only one variable needs to be modified, password type):
	
		#Grab a request content and save it as test.txt
		
		POST /XXXXXX/XXXXXXX/XXXXXX HTTP/1.1
		Host: XXX.XXX.XXX.XXX
		User-Agent: XXXXXXXXXXX
		Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
		Accept-Language: en-US,en;q=0.5
		Accept-Encoding: gzip, deflate
		Referer: http://XXX.XXX.XXX.XXX/XXXXXX/XXXXXXX/XXXXXX
		Content-Type: application/x-www-form-urlencoded
		Content-Length: 39
		Connection: close
		Upgrade-Insecure-Requests: 1

		XXXXXXX=this&XXXXXXX=login
		
		
		#Determine the position of the variable to be modified is this
		
		python3 BlastMan.py -f /xxx/xxxx/test.txt -e failed -C -c /dict/dict_test.txt -M this -t 10 -v -b 10
		
		-f: request test.txt location
		-e: When the request variable is wrong, the response content will contain a generic string failed to determine whether the request is correct
		-C: Use single variable mode
		-c: variable dictionary position
		-M: need to modify the location of the content
		-t: number of threads
		-v: display details
		-b: Time difference between requests,default is 0,Unit:second

	Normal mode (There are two variables that need to be modified, username and password types):
	
		#Grab a request content and save it as test.txt
		
		POST /XXXXXX/XXXXXXX/XXXXXX HTTP/1.1
		Host:XXX.XXX.XXX.XXX
		Content-Type:application/x-www-form-urlencoded
		Content-Length:74

		username=this-username&password=this-password&Login=login

		#Determine the variable position to be modified is this-username, this-password
		
		python3 BlastMan.py -f /xxx/xxxx/test.txt -E 401 -u this-username -U /dict/usearname.txt -p this-password -P /dict/password.txt -T 10 -n 5 -v -X -S
		
		-f: request test.txt location
		-E: When the request variable is wrong, the response code is usually 401, which is used to judge whether the request is correct
		-u: username location
		-U: username dictionary location
		-p: password location
		-P: password dictionary location
		-T: wait for response time of 10 seconds
		-n: the maximum number of requests for an appeal
		-v: display details
		-X: stop the follow-up test immediately after finding a success
		-S: Use SSL
		
	Normal mode (two variables need to be modified, username and password types):
	
		#Grab a request content and save it as test.txt
		
		GET /XXX/result?s=this-username HTTP/1.1
		Host: XXX.XXX.XXX.XXX
		User-Agent: XXXXXXXXXXX
		Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
		Accept-Language: en-US,en;q=0.5
		Accept-Encoding: gzip, deflate
		Referer: http:///XXXXXX/XXXXXXX/XXXXXX?s=this-password
		Connection: close
		Cookie: st=44023b9a53b0589fbd3db2e827502258; UM_distinctid=1711aeae77832b-07f5744d413164
		Upgrade-Insecure-Requests: 1
		
		#Determine the variable position to be modified is this-username, this-password
		
		python3 BlastMan.py -f /xxx/xxxx/test.txt -R login.html -u this-username -U /dict/usearname.txt -p this-password -P /dict/password.txt
		
		-f: request test.txt location
		-R: When the request variable is wrong, the login.html field always appears in the returned response header, which is used to judge whether the request is correct
		-u: username location
		-U: username dictionary location
		-p: password location
		-P: password dictionary location

	Other commands:
		python3 BlastMan.py -f /xxx/xxxx/test.txt -R login.html -E 401 -e failed -u this-username -U /dict/usearname.txt -p this-password -P /dict/password.txt
		python3 BlastMan.py -f /xxx/xxxx/test.txt -e failed -E 401 -C -c /dict/dict_test.txt -M this -t 10 -v -X

	log:
		If successful, it will be recorded in the log: BlastMan/log/
		Error log: BlastMan/log/
